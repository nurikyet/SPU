#ifndef SPU_H_INCLUDED
#define SPU_H_INCLUDED

#include "..\Stack.h"

#define PROCESSOR_DUMP(spu) ProcessorDump(LOG_FILE, stk, __func__, __FILE__, __LINE__)

#define PPROCESSOR_VERIFY(spu) {int error = ProcessorOk(LOG_FILE, spu);  \
                               if (error != 0)                                      \
                               {                                                \
                               PrintError(LOG_FILE, error);                     \
                        PROCESSOR_DUMP(spu);                             \
                        return error;                                    \
                        }                                                \
                    }

void BinaryPrintout(struct Processor* spu, int position);
void OptionsPop (struct Processor* spu, int code);
void ByteDtor(int* codeArray);

elem_t Variables (struct Processor* spu, int code);

int CommandOptions(char* line);
int Compare(struct Processor* spu);
int RegistreOptions(struct Processor*spu);

int ProcessorCtor(struct processor* spu, const char* my_file_name);
int ProcessorDtor(struct Processor* spu);
int ProcessorPush(struct Processor* spu);
int ProccesorPushR(struct Processor* spu);
int ProcessorPop(struct Processor* spu, int code);
int ProcesserDump(struct Processor* spu, const char *file, int line, const char *function, FILE* fp);
int ProcessorOk(struct Processor* spu);

#endif // SPU_H_INCLUDED
